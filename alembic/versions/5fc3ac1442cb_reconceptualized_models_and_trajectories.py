"""reconceptualized models and trajectories

Revision ID: 5fc3ac1442cb
Revises: 001
Create Date: 2025-09-14 19:26:29.817459

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5fc3ac1442cb'
down_revision: Union[str, Sequence[str], None] = '001'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('model_instances',
    sa.Column('model_id', sa.String(length=255), nullable=False),
    sa.Column('trajectory_id', sa.Integer(), nullable=False),
    sa.Column('params', sa.JSON(), nullable=False),
    sa.Column('hyperparams', sa.JSON(), nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['models.model_id'], ),
    sa.ForeignKeyConstraint(['trajectory_id'], ['trajectories.trajectory_id'], ),
    sa.PrimaryKeyConstraint('model_id', 'trajectory_id')
    )
    op.create_index('idx_model_instances_model_id', 'model_instances', ['model_id'], unique=False)
    op.create_index('idx_model_instances_trajectory_id', 'model_instances', ['trajectory_id'], unique=False)
    
    # Drop hp_instances first (dependent table)
    op.drop_index(op.f('idx_hp_instances_model_id'), table_name='hp_instances')
    op.drop_index(op.f('idx_hp_instances_trajectory_id'), table_name='hp_instances')
    op.drop_index(op.f('idx_hp_instances_type'), table_name='hp_instances')
    op.drop_index(op.f('idx_hp_instances_value'), table_name='hp_instances')
    op.drop_table('hp_instances')
    
    # Drop param_instances 
    op.drop_index(op.f('idx_param_instances_model_id'), table_name='param_instances')
    op.drop_index(op.f('idx_param_instances_trajectory_id'), table_name='param_instances')
    op.drop_table('param_instances')
    
    # Now drop hyperparameters (referenced table)
    op.drop_index(op.f('idx_hyperparameters_model_id'), table_name='hyperparameters')
    op.drop_index(op.f('idx_hyperparameters_type'), table_name='hyperparameters')
    op.drop_table('hyperparameters')
    
    op.add_column('metrics', sa.Column('metric_schema', sa.JSON(), nullable=False))
    op.add_column('models', sa.Column('hyperparam_schema', sa.JSON(), nullable=True))
    op.add_column('performances', sa.Column('model_id', sa.String(length=255), nullable=False))
    op.add_column('performances', sa.Column('local_timestep', sa.Integer(), nullable=True))
    op.add_column('performances', sa.Column('data', sa.JSON(), nullable=False))
    op.drop_index(op.f('idx_model_performance_song'), table_name='performances')
    op.drop_index(op.f('idx_model_performance_value'), table_name='performances')
    op.create_foreign_key(None, 'performances', 'models', ['model_id'], ['model_id'])
    op.drop_column('performances', 'value')
    op.drop_column('performances', 'song')
    op.add_column('trajectories', sa.Column('user_id', sa.Integer(), nullable=True))
    op.add_column('trajectories', sa.Column('funnel_id', sa.Integer(), nullable=True))
    op.drop_index(op.f('idx_trajectory_model_id'), table_name='trajectories')
    op.drop_index(op.f('idx_trajectory_model_started'), table_name='trajectories')
    op.create_index('idx_trajectory_funnel_id', 'trajectories', ['funnel_id'], unique=False)
    op.drop_constraint(op.f('trajectories_model_id_fkey'), 'trajectories', type_='foreignkey')
    op.create_foreign_key(None, 'trajectories', 'users', ['user_id'], ['user_id'])
    op.create_foreign_key(None, 'trajectories', 'funnels', ['funnel_id'], ['funnel_id'])
    op.drop_column('trajectories', 'model_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('trajectories', sa.Column('model_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'trajectories', type_='foreignkey')
    op.drop_constraint(None, 'trajectories', type_='foreignkey')
    op.create_foreign_key(op.f('trajectories_model_id_fkey'), 'trajectories', 'models', ['model_id'], ['model_id'])
    op.drop_index('idx_trajectory_funnel_id', table_name='trajectories')
    op.create_index(op.f('idx_trajectory_model_started'), 'trajectories', ['model_id', 'started'], unique=False)
    op.create_index(op.f('idx_trajectory_model_id'), 'trajectories', ['model_id'], unique=False)
    op.drop_column('trajectories', 'funnel_id')
    op.drop_column('trajectories', 'user_id')
    op.add_column('performances', sa.Column('song', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('performances', sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'performances', type_='foreignkey')
    op.create_index(op.f('idx_model_performance_value'), 'performances', ['value'], unique=False)
    op.create_index(op.f('idx_model_performance_song'), 'performances', ['song'], unique=False)
    op.drop_column('performances', 'data')
    op.drop_column('performances', 'local_timestep')
    op.drop_column('performances', 'model_id')
    op.drop_column('models', 'hyperparam_schema')
    op.drop_column('metrics', 'metric_schema')
    
    # Create hyperparameters first (referenced table)
    op.create_table('hyperparameters',
    sa.Column('model_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('hp_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('f32', 'bool', name='hyperparametertype'), autoincrement=False, nullable=False),
    sa.Column('min', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.CheckConstraint('min IS NULL OR max IS NULL OR min <= max', name=op.f('chk_hyperparameter_min_max')),
    sa.ForeignKeyConstraint(['model_id'], ['models.model_id'], name=op.f('hyperparameters_model_id_fkey')),
    sa.PrimaryKeyConstraint('model_id', 'hp_id', name=op.f('hyperparameters_pkey'))
    )
    op.create_index(op.f('idx_hyperparameters_type'), 'hyperparameters', ['type'], unique=False)
    op.create_index(op.f('idx_hyperparameters_model_id'), 'hyperparameters', ['model_id'], unique=False)
    
    # Create param_instances
    op.create_table('param_instances',
    sa.Column('model_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('trajectory_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('params', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['models.model_id'], name=op.f('param_instances_model_id_fkey')),
    sa.ForeignKeyConstraint(['trajectory_id'], ['trajectories.trajectory_id'], name=op.f('param_instances_trajectory_id_fkey')),
    sa.PrimaryKeyConstraint('model_id', 'trajectory_id', name=op.f('param_instances_pkey'))
    )
    op.create_index(op.f('idx_param_instances_trajectory_id'), 'param_instances', ['trajectory_id'], unique=False)
    op.create_index(op.f('idx_param_instances_model_id'), 'param_instances', ['model_id'], unique=False)
    
    # Create hp_instances last (dependent table)
    op.create_table('hp_instances',
    sa.Column('model_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('trajectory_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('hp_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('f32', 'bool', name='hyperparametertype'), autoincrement=False, nullable=False),
    sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['model_id', 'hp_id'], ['hyperparameters.model_id', 'hyperparameters.hp_id'], name=op.f('hp_instances_model_id_hp_id_fkey')),
    sa.ForeignKeyConstraint(['model_id'], ['models.model_id'], name=op.f('hp_instances_model_id_fkey')),
    sa.ForeignKeyConstraint(['model_id'], ['models.model_id'], name=op.f('hp_instances_model_id_fkey1')),
    sa.ForeignKeyConstraint(['trajectory_id'], ['trajectories.trajectory_id'], name=op.f('hp_instances_trajectory_id_fkey')),
    sa.PrimaryKeyConstraint('model_id', 'trajectory_id', 'hp_id', name=op.f('hp_instances_pkey'))
    )
    op.create_index(op.f('idx_hp_instances_value'), 'hp_instances', ['value'], unique=False)
    op.create_index(op.f('idx_hp_instances_type'), 'hp_instances', ['type'], unique=False)
    op.create_index(op.f('idx_hp_instances_trajectory_id'), 'hp_instances', ['trajectory_id'], unique=False)
    op.create_index(op.f('idx_hp_instances_model_id'), 'hp_instances', ['model_id'], unique=False)
    
    op.drop_index('idx_model_instances_trajectory_id', table_name='model_instances')
    op.drop_index('idx_model_instances_model_id', table_name='model_instances')
    op.drop_table('model_instances')
    # ### end Alembic commands ###
